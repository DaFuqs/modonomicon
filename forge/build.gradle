plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

if (System.getenv('MOD_VERSION') != null) {
    mod_version = System.getenv('MOD_VERSION')
}
version = mod_version

base {
    archivesName = "${mod_id}-${minecraft_version}-forge"
}

mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")

    config("${mod_id}.mixins.json")
    config("${mod_id}.forge.mixins.json")
}

jarJar.enable()

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            args += "--username=Modonomicon"

            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"
    compileOnly project(":common")
    annotationProcessor("org.spongepowered:mixin:${mixin_version}:processor")

    //Jei
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

//    implementation "vazkii.patchouli:Patchouli:${minecraft_version}-${patchouli_version}-FORGE"

    //commonmark
    //mark it for forge to add to the classpath
    minecraftLibrary "org.commonmark:commonmark:${commonmark_version}"
    minecraftLibrary "org.commonmark:commonmark-ext-gfm-strikethrough:${commonmark_version}"
    minecraftLibrary "org.commonmark:commonmark-ext-ins:${commonmark_version}"
    //and include it in the jar
    jarJar(group: 'org.commonmark', name: 'commonmark', version: "[${commonmark_version},)")
    jarJar(group: 'org.commonmark', name: 'commonmark-ext-gfm-strikethrough', version: "[${commonmark_version},)")
    jarJar(group: 'org.commonmark', name: 'commonmark-ext-ins', version: "[${commonmark_version},)")


}

//Disable test compilation as a) we are not using tests and b) it fails due to not being able to access jei in common
compileTestJava {
    enabled = false
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    //for some reason we need item textures in forge too for dev runtime, so we have to set a strategy
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(project(":common").sourceSets.main.allSource)
}

tasks.named('jar') {
    archiveClassifier = "slim"
    processResources.exclude("**/data/modonomicon/modonomicon/books/**")
    processResources.exclude("**/data/modonomicon/modonomicon/multiblocks/**")
    finalizedBy('reobfJar')
}

tasks.named('jarJar') {
    archiveClassifier = ""
    processResources.exclude("**/data/modonomicon/modonomicon/books/**")
    processResources.exclude("**/data/modonomicon/modonomicon/multiblocks/**")
    finalizedBy('reobfJar')
}

processResources {
    //for some reason we need item textures in forge too for dev runtime, so we have to set a strategy
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from project(":common").sourceSets.main.resources
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()

            from components.java
            jarJar.component(it)

            pom {
                name = mod_name
                description = 'Data-driven minecraft in-game documentation with progress visualization.'
                url = 'https://github.com/klikli-dev/modonomicon'
                licenses {
                    license {
                        name = 'MIT AND CC-BY-4.0'
                        url = 'https://github.com/klikli-dev/modonomicon#licensing'
                    }
                }
                scm {
                    connection = 'scm:git:ssh:git@github.com:klikli-dev/modonomicon.git'
                    url = 'https://github.com/klikli-dev/modonomicon'
                }
            }
        }
    }
    repositories {
        maven {
            name = "cloudsmith"
            url = "https://maven.cloudsmith.io/klikli-dev/mods/"
            def releasesRepoUrl = "https://maven.cloudsmith.io/klikli-dev/mods/"
            def snapshotsRepoUrl = "https://maven.cloudsmith.io/klikli-dev/mods/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv('MAVEN_USER')
                password = System.getenv('MAVEN_PASS')
            }
        }
    }
}